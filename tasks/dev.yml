# Community packages

- name: Install language tools available in community packages
  become: yes
  community.general.pacman:
    name:
      - dart
      - go
      - nodejs
      - npm
      - pnpm
      - opam
      - python-pip
      - python-pipx
      - python-poetry
    state: present

- name: Check if Deno is installed
  command: which deno
  register: deno_exists
  ignore_errors: true
  changed_when: false

- name: Install Deno if no present
  shell: curl -fsSL https://deno.land/install.sh | sh
  args:
    executable: /usr/bin/zsh
  when: deno_exists.failed

- name: Check if Rust has been installed
  command: rustc --version
  register: rust_check
  ignore_errors: true

- name: Install Rust if not present
  shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  args:
    executable: /usr/bin/zsh
  when: rust_check.failed

- name: Check if opam is initialized
  stat:
    path: "/home/{{ username }}/.opam"
  register: opam_init_check

- name: Initialize opam if necessary
  shell: |
    opam init -y
    $eval $(opam env)
  when: not opam_init_check.stat.exists

- name: Check if odoc is installed
  command: opam list --installed odoc
  register: odoc_check
  ignore_errors: true

- name: Installed odoc is not present
  shell: opam install odoc
  args:
    executable: /usr/bin/zsh
  when: odoc_check.failed

- name: Check if ocamlformat is installed
  command: opam list --installed ocamlformat
  register: ocamlformat_check
  ignore_errors: true

- name: Installed ocamlformat is not present
  shell: opam install ocamlformat
  args:
    executable: /usr/bin/zsh
  when: ocamlformat_check.failed

- name: Check if utop is installed
  command: opam list --installed utop
  register: utop_check
  ignore_errors: true

- name: Installed utop is not present
  shell: opam install utop
  args:
    executable: /usr/bin/zsh
  when: utop_check.failed

- name: Install Docker and Docker Compose
  become: yes
  community.general.pacman:
    name:
      - docker
      - docker-compose
    state: present

- name: Start/enable `docker` service
  become: yes
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: true

# https://docs.docker.com/engine/install/linux-postinstall/
- name: Ensure a `docker` group exists
  become: yes
  ansible.builtin.group:
    name: docker
    state: present

- name: Add user to the `docker` group
  become: yes
  ansible.builtin.user:
    name: "{{ username }}"
    groups: docker
    append: yes
